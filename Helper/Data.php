<?php eval(base64_decode("LyoqICogR29NYWdlLmNvbSAqICogR29NYWdlIEZlZWQgUHJvIE0yICogKiBAY2F0ZWdvcnkgRXh0ZW5zaW9uICogQGNvcHlyaWdodCBDb3B5cmlnaHQgKGMpIDIwMTAtMjAxNiBHb01hZ2UuY29tIChodHRwczovL3d3dy5nb21hZ2UuY29tKSAqIEBhdXRob3IgR29NYWdlLmNvbSAqIEBsaWNlbnNlIGh0dHBzOi8vd3d3LmdvbWFnZS5jb20vbGljZW5zaW5nIFNpbmdsZSBkb21haW4gbGljZW5zZSAqIEB0ZXJtcyBvZiB1c2UgaHR0cHM6Ly93d3cuZ29tYWdlLmNvbS90ZXJtcy1vZi11c2UgKiBAdmVyc2lvbiBSZWxlYXNlOiAxLjAuMCAqIEBzaW5jZSBDbGFzcyBhdmFpbGFibGUgc2luY2UgUmVsZWFzZSAxLjAuMCAqLyBuYW1lc3BhY2UgR29NYWdlXEZlZWRcSGVscGVyOyB1c2UgTWFnZW50b1xGcmFtZXdvcmtcQXBwXEZpbGVzeXN0ZW1cRGlyZWN0b3J5TGlzdDsgY2xhc3MgRGF0YSB7IC8qKiAqIEB2YXIgXE1hZ2VudG9cQ2F0YWxvZ1xNb2RlbFxSZXNvdXJjZU1vZGVsXFByb2R1Y3RcQXR0cmlidXRlXENvbGxlY3Rpb25GYWN0b3J5ICovIHByb3RlY3RlZCAkX2F0dHJpYnV0ZUNvbGxlY3Rpb25GYWN0b3J5OyAvKiogKiBAdmFyIFxHb01hZ2VcRmVlZFxNb2RlbFxSZXNvdXJjZU1vZGVsXEF0dHJpYnV0ZVxDb2xsZWN0aW9uICovIHByb3RlY3RlZCAkX2R5bmFtaWNBdHRyaWJ1dGVDb2xsZWN0aW9uOyAvKiogKiBAdmFyIFxNYWdlbnRvXFN0b3JlXE1vZGVsXFN0b3JlTWFuYWdlckludGVyZmFjZSAqLyBwcm90ZWN0ZWQgJF9zdG9yZU1hbmFnZXI7IC8qKiAqIEB2YXIgXE1hZ2VudG9cU3RvcmVcTW9kZWxcU3lzdGVtXFN0b3JlICovIHByb3RlY3RlZCAkX3N5c3RlbVN0b3JlOyAvKiogKiBAdmFyIFxNYWdlbnRvXEZyYW1ld29ya1xGaWxlc3lzdGVtXERpcmVjdG9yeVxSZWFkSW50ZXJmYWNlICovIHByb3RlY3RlZCAkX2RpcmVjdG9yeTsgLyoqICogQHZhciBcTWFnZW50b1xGcmFtZXdvcmtcU3RkbGliXERhdGVUaW1lXERhdGVUaW1lICovIHByb3RlY3RlZCAkX2RhdGVUaW1lOyAvKiogKiBAdmFyIFxNYWdlbnRvXEZyYW1ld29ya1xNb2R1bGVcTW9kdWxlTGlzdEludGVyZmFjZSAqLyBwcm90ZWN0ZWQgJF9tb2R1bGVMaXN0OyAvKiogKiBAdmFyIFxNYWdlbnRvXEZyYW1ld29ya1xKc29uXEhlbHBlclxEYXRhICovIHByb3RlY3RlZCAkX2pzb25IZWxwZXI7IC8qKiAqIEB2YXIgXE1hZ2VudG9cRnJhbWV3b3JrXEVuY3J5cHRpb25cRW5jcnlwdG9ySW50ZXJmYWNlICovIHByb3RlY3RlZCAkX2VuY3J5cHRvcjsgLyoqICogQHZhciBcR29NYWdlXEZlZWRcTW9kZWxcTWFwcGVyXEZhY3RvcnkgKi8gcHJvdGVjdGVkICRfbWFwcGVyRmFjdG9yeTsgLyoqICogQHZhciBcTWFnZW50b1xGcmFtZXdvcmtcT2JqZWN0TWFuYWdlckludGVyZmFjZSAqLyBwcm90ZWN0ZWQgJF9vYmplY3RNYW5hZ2VyOyAvKiogKiBAdmFyIFxNYWdlbnRvXEZyYW1ld29ya1xBcHBcQ29uZmlnXFNjb3BlQ29uZmlnSW50ZXJmYWNlICovIHByb3RlY3RlZCAkX3Njb3BlQ29uZmlnOyBwdWJsaWMgZnVuY3Rpb24gX19jb25zdHJ1Y3QoIFxNYWdlbnRvXEZyYW1ld29ya1xPYmplY3RNYW5hZ2VySW50ZXJmYWNlICRvYmplY3RNYW5hZ2VyICkgeyAkdGhpcy0+X29iamVjdE1hbmFnZXIgPSAkb2JqZWN0TWFuYWdlcjsgJHRoaXMtPl9hdHRyaWJ1dGVDb2xsZWN0aW9uRmFjdG9yeSA9ICRvYmplY3RNYW5hZ2VyLT5nZXQoJ01hZ2VudG9cQ2F0YWxvZ1xNb2RlbFxSZXNvdXJjZU1vZGVsXFByb2R1Y3RcQXR0cmlidXRlXENvbGxlY3Rpb25GYWN0b3J5Jyk7ICR0aGlzLT5fZHluYW1pY0F0dHJpYnV0ZUNvbGxlY3Rpb24gPSAkb2JqZWN0TWFuYWdlci0+Z2V0KCdHb01hZ2VcRmVlZFxNb2RlbFxSZXNvdXJjZU1vZGVsXEF0dHJpYnV0ZVxDb2xsZWN0aW9uJyk7ICRmaWxlc3lzdGVtID0gJG9iamVjdE1hbmFnZXItPmdldCgnTWFnZW50b1xGcmFtZXdvcmtcRmlsZXN5c3RlbScpOyAkdGhpcy0+X2RpcmVjdG9yeSA9ICRmaWxlc3lzdGVtLT5nZXREaXJlY3RvcnlSZWFkKERpcmVjdG9yeUxpc3Q6Ok1FRElBKTsgJHRoaXMtPl9zdG9yZU1hbmFnZXIgPSAkb2JqZWN0TWFuYWdlci0+Z2V0KCdNYWdlbnRvXFN0b3JlXE1vZGVsXFN0b3JlTWFuYWdlcicpOyAkdGhpcy0+X3N5c3RlbVN0b3JlID0gJG9iamVjdE1hbmFnZXItPmdldCgnTWFnZW50b1xTdG9yZVxNb2RlbFxTeXN0ZW1cU3RvcmUnKTsgJHRoaXMtPl9kYXRlVGltZSA9ICRvYmplY3RNYW5hZ2VyLT5nZXQoJ01hZ2VudG9cRnJhbWV3b3JrXFN0ZGxpYlxEYXRlVGltZVxEYXRlVGltZScpOyAkdGhpcy0+X21vZHVsZUxpc3QgPSAkb2JqZWN0TWFuYWdlci0+Z2V0KCdNYWdlbnRvXEZyYW1ld29ya1xNb2R1bGVcTW9kdWxlTGlzdCcpOyAkdGhpcy0+X2pzb25IZWxwZXIgPSAkb2JqZWN0TWFuYWdlci0+Z2V0KCdNYWdlbnRvXEZyYW1ld29ya1xKc29uXEhlbHBlclxEYXRhJyk7ICR0aGlzLT5fZW5jcnlwdG9yID0gJG9iamVjdE1hbmFnZXItPmdldCgnTWFnZW50b1xGcmFtZXdvcmtcRW5jcnlwdGlvblxFbmNyeXB0b3InKTsgJHRoaXMtPl9tYXBwZXJGYWN0b3J5ID0gJG9iamVjdE1hbmFnZXItPmdldCgnR29NYWdlXEZlZWRcTW9kZWxcTWFwcGVyXEZhY3RvcnknKTsgJHRoaXMtPl9zY29wZUNvbmZpZyA9ICRvYmplY3RNYW5hZ2VyLT5nZXQoJ01hZ2VudG9cRnJhbWV3b3JrXEFwcFxDb25maWcnKTsgfSAvKiogKiBAcmV0dXJuIGFycmF5ICovIHB1YmxpYyBmdW5jdGlvbiBnZXRQcm9kdWN0QXR0cmlidXRlcygpIHsgJGF0dHJpYnV0ZXMgPSAkdGhpcy0+X2F0dHJpYnV0ZUNvbGxlY3Rpb25GYWN0b3J5LT5jcmVhdGUoKS0+YWRkVmlzaWJsZUZpbHRlcigpLT5nZXRJdGVtcygpOyAkYXR0cmlidXRlcyA9IGFycmF5X21hcChmdW5jdGlvbiAoJGF0dHJpYnV0ZSkgeyByZXR1cm4gWyAndmFsdWUnID0+ICRhdHRyaWJ1dGUtPmdldEF0dHJpYnV0ZUNvZGUoKSwgJ2xhYmVsJyA9PiAkYXR0cmlidXRlLT5nZXRTdG9yZUxhYmVsKCkgXTsgfSwgJGF0dHJpYnV0ZXMgKTsgZm9yZWFjaCAoJHRoaXMtPl9tYXBwZXJGYWN0b3J5LT5nZXRDdXN0b21NYXBwZXJzKCkgYXMgJHZhbHVlID0+ICRjbGFzcykgeyAkYXR0cmlidXRlc1tdID0gWyAndmFsdWUnID0+ICR2YWx1ZSwgJ2xhYmVsJyA9PiAkY2xhc3M6OmdldExhYmVsKCkgXTsgfSB1c29ydCgkYXR0cmlidXRlcywgZnVuY3Rpb24gKCRhLCAkYikgeyByZXR1cm4gc3RyY21wKCRhWydsYWJlbCddLCAkYlsnbGFiZWwnXSk7IH0gKTsgcmV0dXJuICRhdHRyaWJ1dGVzOyB9IC8qKiAqIEByZXR1cm4gYXJyYXkgKi8gcHVibGljIGZ1bmN0aW9uIGdldER5bmFtaWNBdHRyaWJ1dGVzKCkgeyAkYXR0cmlidXRlcyA9ICR0aGlzLT5fZHluYW1pY0F0dHJpYnV0ZUNvbGxlY3Rpb24tPmxvYWQoKS0+Z2V0SXRlbXMoKTsgJGF0dHJpYnV0ZXMgPSBhcnJheV9tYXAoZnVuY3Rpb24gKFxHb01hZ2VcRmVlZFxNb2RlbFxBdHRyaWJ1dGUgJGF0dHJpYnV0ZSkgeyByZXR1cm4gWyAndmFsdWUnID0+ICRhdHRyaWJ1dGUtPmdldENvZGUoKSwgJ2xhYmVsJyA9PiAkYXR0cmlidXRlLT5nZXROYW1lKCkgXTsgfSwgJGF0dHJpYnV0ZXMgKTsgdXNvcnQoJGF0dHJpYnV0ZXMsIGZ1bmN0aW9uICgkYSwgJGIpIHsgcmV0dXJuIHN0cmNtcCgkYVsnbGFiZWwnXSwgJGJbJ2xhYmVsJ10pOyB9ICk7IHJldHVybiAkYXR0cmlidXRlczsgfSAvKiogKiBAcGFyYW0gc3RyaW5nICRmaWxlTmFtZSAqIEBwYXJhbSBpbnQgJHN0b3JlSWQgKiBAcmV0dXJuIHN0cmluZyAqLyBwdWJsaWMgZnVuY3Rpb24gZ2V0RmVlZFVybCgkZmlsZU5hbWUgPSAnJywgJHN0b3JlSWQgPSAwKSB7IGlmICgkZmlsZU5hbWUgJiYgJHN0b3JlSWQpIHsgJHBhdGggPSAkdGhpcy0+Z2V0RmVlZFBhdGgoJGZpbGVOYW1lKTsgaWYgKCRwYXRoKSB7IHJldHVybiAkdGhpcy0+X3N0b3JlTWFuYWdlci0+Z2V0U3RvcmUoJHN0b3JlSWQpLT5nZXRCYXNlVXJsKCBcTWFnZW50b1xGcmFtZXdvcmtcVXJsSW50ZXJmYWNlOjpVUkxfVFlQRV9NRURJQSApIC4gJHBhdGg7IH0gfSByZXR1cm4gJyc7IH0gLyoqICogQHBhcmFtIHN0cmluZyAkZmlsZU5hbWUgKiBAcmV0dXJuIHN0cmluZyAqLyBwdWJsaWMgZnVuY3Rpb24gZ2V0RmVlZFBhdGgoJGZpbGVOYW1lLCAkYWJzb2x1dGUgPSBmYWxzZSkgeyAkcGF0aCA9IFxHb01hZ2VcRmVlZFxNb2RlbFxXcml0ZXJcV3JpdGVySW50ZXJmYWNlOjpESVJFQ1RPUlkgLiAnLycgLiAkZmlsZU5hbWU7IGlmICgkdGhpcy0+X2RpcmVjdG9yeS0+aXNFeGlzdCgkcGF0aCkpIHsgcmV0dXJuICRhYnNvbHV0ZSA/ICR0aGlzLT5fZGlyZWN0b3J5LT5nZXRBYnNvbHV0ZVBhdGgoJHBhdGgpIDogJHBhdGg7IH0gcmV0dXJuICcnOyB9IC8qKiAqIEBwYXJhbSBpbnQgJGludGVydmFsICogQHBhcmFtIGludCAkaG91ckZyb20gKiBAcGFyYW0gaW50ICRob3VyVG8gKiBAcGFyYW0gc3RyaW5nICRsYXN0UnVuICogQHJldHVybiBib29sICovIHB1YmxpYyBmdW5jdGlvbiBuZWVkUnVuQ3JvbigkaW50ZXJ2YWwsICRob3VyRnJvbSwgJGhvdXJUbywgJGxhc3RSdW4pIHsgJGN1cnJlbnQgPSAkdGhpcy0+X2RhdGVUaW1lLT5nbXREYXRlKCdHJyk7ICRsYXN0UnVuID0gJGxhc3RSdW4gPyAkdGhpcy0+X2RhdGVUaW1lLT5nbXRUaW1lc3RhbXAoJGxhc3RSdW4pIDogMDsgc3dpdGNoICgkaW50ZXJ2YWwpIHsgY2FzZSAxMjogY2FzZSAyNDogaWYgKCRob3VyRnJvbSAhPSAkY3VycmVudCkgeyByZXR1cm4gZmFsc2U7IH0gaWYgKCgkbGFzdFJ1biArICRpbnRlcnZhbCAqIDYwICogNjApID4gJHRoaXMtPl9kYXRlVGltZS0+Z210VGltZXN0YW1wKCkpIHsgcmV0dXJuIGZhbHNlOyB9IGJyZWFrOyBkZWZhdWx0OiBpZiAoISRob3VyVG8pIHsgJGhvdXJUbyA9IDI0OyB9ICRob3VycyA9IFtdOyBpZiAoJGhvdXJGcm9tID4gJGhvdXJUbykgeyBmb3IgKCRpID0gJGhvdXJGcm9tOyAkaSA8PSAyMzsgJGkrKykgeyAkaG91cnNbXSA9ICRpOyB9IGZvciAoJGkgPSAwOyAkaSA8PSAkaG91clRvOyAkaSsrKSB7ICRob3Vyc1tdID0gJGk7IH0gfSBlbHNlIHsgZm9yICgkaSA9ICRob3VyRnJvbTsgJGkgPD0gJGhvdXJUbzsgJGkrKykgeyBpZiAoJGkgPT0gMjQpIHsgJGhvdXJzW10gPSAwOyB9IGVsc2UgeyAkaG91cnNbXSA9ICRpOyB9IH0gfSBpZiAoIWluX2FycmF5KCRjdXJyZW50LCAkaG91cnMpKSB7IHJldHVybiBmYWxzZTsgfSBpZiAoKCRsYXN0UnVuICsgJGludGVydmFsICogNjAgKiA2MCkgPiAkdGhpcy0+X2RhdGVUaW1lLT5nbXRUaW1lc3RhbXAoKSkgeyByZXR1cm4gZmFsc2U7IH0gfSByZXR1cm4gdHJ1ZTsgfSAvKiogKiBAcmV0dXJuIGFycmF5ICovIHB1YmxpYyBmdW5jdGlvbiBnZXRBdmFpbGFibGVXZWJzaXRlcygpIHsgaWYgKCEkdGhpcy0+X3Njb3BlQ29uZmlnLT5nZXRWYWx1ZSgnZ29tYWdlX2FjdGl2YXRpb24vZmVlZC9pbnN0YWxsZWQnKSB8fCAoaW50dmFsKCR0aGlzLT5fc2NvcGVDb25maWctPmdldFZhbHVlKCdnb21hZ2VfYWN0aXZhdGlvbi9mZWVkL2NvdW50JykpID4gMTApICkgeyByZXR1cm4gW107IH0gJHRpbWVfdG9fdXBkYXRlID0gNjAgKiA2MCAqIDI0ICogMTU7ICRyID0gJHRoaXMtPl9zY29wZUNvbmZpZy0+Z2V0VmFsdWUoJ2dvbWFnZV9hY3RpdmF0aW9uL2ZlZWQvYXInKTsgJHQgPSAkdGhpcy0+X3Njb3BlQ29uZmlnLT5nZXRWYWx1ZSgnZ29tYWdlX2FjdGl2YXRpb24vZmVlZC90aW1lJyk7ICRzID0gJHRoaXMtPl9zY29wZUNvbmZpZy0+Z2V0VmFsdWUoJ2dvbWFnZV9hY3RpdmF0aW9uL2ZlZWQvd2Vic2l0ZXMnKTsgJGxhc3RfY2hlY2sgPSBzdHJfcmVwbGFjZSgkciwgJycsICR0aGlzLT5fZW5jcnlwdG9yLT5kZWNyeXB0KCR0KSk7ICRzaXRlcyA9IGV4cGxvZGUoJywnLCBzdHJfcmVwbGFjZSgkciwgJycsICR0aGlzLT5fZW5jcnlwdG9yLT5kZWNyeXB0KCRzKSkpOyAkc2l0ZXMgPSBhcnJheV9kaWZmKCRzaXRlcywgWycnXSk7IGlmICgoJGxhc3RfY2hlY2sgKyAkdGltZV90b191cGRhdGUpIDwgJHRoaXMtPl9kYXRlVGltZS0+Z210VGltZXN0YW1wKCkpIHsgJHRoaXMtPmEoKGludCkkdGhpcy0+X3Njb3BlQ29uZmlnLT5nZXRWYWx1ZSgnZ29tYWdlX2FjdGl2YXRpb24vZmVlZC9jb3VudCcpLCBpbXBsb2RlKCcsJywgJHNpdGVzKSApOyB9IHJldHVybiAkc2l0ZXM7IH0gcHVibGljIGZ1bmN0aW9uIGEoJGMgPSAwLCAkcyA9ICcnKSB7ICRrID0gJHRoaXMtPl9zY29wZUNvbmZpZy0+Z2V0VmFsdWUoJ2dvbWFnZV9zZXR0aW5ncy9mZWVkL2tleScpOyAvKiogQHZhciBcTWFnZW50b1xDb25maWdcTW9kZWxcQ29uZmlnICRjb25maWcgKi8gJGNvbmZpZyA9ICR0aGlzLT5fb2JqZWN0TWFuYWdlci0+Y3JlYXRlKCdNYWdlbnRvXENvbmZpZ1xNb2RlbFxDb25maWcnKTsgJGNoID0gY3VybF9pbml0KCk7IGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9VUkwsIHNwcmludGYoJ2h0dHBzOi8vd3d3LmdvbWFnZS5jb20vaW5kZXgucGhwL2dvbWFnZV9kb3dubG9hZGFibGUva2V5L2NoZWNrJykpOyBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfUE9TVCwgdHJ1ZSk7IGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9QT1NURklFTERTLCAna2V5PScgLiB1cmxlbmNvZGUoJGspIC4gJyZza3U9ZmVlZC1wcm8tbTImZG9tYWlucz0nIC4gdXJsZW5jb2RlKGltcGxvZGUoJywnLCAkdGhpcy0+X2dldERvbWFpbnMoKSkpIC4gJyZ2ZXI9JyAuIHVybGVuY29kZSgkdGhpcy0+X2dldFZlcnNpb24oKSkpOyBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfVElNRU9VVCwgMzApOyBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfUkVUVVJOVFJBTlNGRVIsIHRydWUpOyBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfU1NMX1ZFUklGWVBFRVIsIDApOyBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfU1NMX1ZFUklGWUhPU1QsIDApOyAkY29udGVudCA9IGN1cmxfZXhlYygkY2gpOyB0cnkgeyAkciA9ICR0aGlzLT5fanNvbkhlbHBlci0+anNvbkRlY29kZSgkY29udGVudCk7IH0gY2F0Y2ggKFxFeGNlcHRpb24gJGUpIHsgJHIgPSBbXTsgfSBpZiAoZW1wdHkoJHIpKSB7ICR2YWx1ZTEgPSAkdGhpcy0+X3Njb3BlQ29uZmlnLT5nZXRWYWx1ZSgnZ29tYWdlX2FjdGl2YXRpb24vZmVlZC9hcicpOyAkZ3JvdXBzID0gWyAnZmVlZCcgPT4gWyAnZmllbGRzJyA9PiBbICdhcicgPT4gWyd2YWx1ZScgPT4gJHZhbHVlMV0sICd3ZWJzaXRlcycgPT4gWyAndmFsdWUnID0+IChzdHJpbmcpJHRoaXMtPl9zY29wZUNvbmZpZy0+Z2V0VmFsdWUoJ2dvbWFnZV9hY3RpdmF0aW9uL2ZlZWQvd2Vic2l0ZXMnKSBdLCAndGltZScgPT4gWyAndmFsdWUnID0+IChzdHJpbmcpJHRoaXMtPl9lbmNyeXB0b3ItPmVuY3J5cHQoJHZhbHVlMSAuICgkdGhpcy0+X2RhdGVUaW1lLT5nbXRUaW1lc3RhbXAoKSAtICg2MCAqIDYwICogMjQgKiAxNSAtIDE4MDApKSAuICR2YWx1ZTEpIF0sICdjb3VudCcgPT4gWyd2YWx1ZScgPT4gJGMgKyAxXSBdIF0gXTsgJGNvbmZpZy0+c2V0U2VjdGlvbignZ29tYWdlX2FjdGl2YXRpb24nKSAtPnNldEdyb3VwcygkZ3JvdXBzKSAtPnNhdmUoKTsgcmV0dXJuOyB9ICR2YWx1ZTEgPSAnJzsgJHZhbHVlMiA9ICcnOyBpZiAoaXNzZXQoJHJbJ2QnXSkgJiYgaXNzZXQoJHJbJ2MnXSkpIHsgJHZhbHVlMSA9ICR0aGlzLT5fZW5jcnlwdG9yLT5lbmNyeXB0KGJhc2U2NF9lbmNvZGUoJHRoaXMtPl9qc29uSGVscGVyLT5qc29uRW5jb2RlKCRyKSkpOyBpZiAoISRzKSB7ICRzID0gJHRoaXMtPl9zY29wZUNvbmZpZy0+Z2V0VmFsdWUoJ2dvbWFnZV9zZXR0aW5ncy9mZWVkL3dlYnNpdGVzJyk7IH0gJHMgPSBhcnJheV9zbGljZShleHBsb2RlKCcsJywgJHMpLCAwLCAkclsnYyddKTsgJHZhbHVlMiA9ICR0aGlzLT5fZW5jcnlwdG9yLT5lbmNyeXB0KCR2YWx1ZTEgLiBpbXBsb2RlKCcsJywgJHMpIC4gJHZhbHVlMSk7IH0gJGdyb3VwcyA9IFsgJ2ZlZWQnID0+IFsgJ2ZpZWxkcycgPT4gWyAnYXInID0+IFsndmFsdWUnID0+ICR2YWx1ZTFdLCAnd2Vic2l0ZXMnID0+IFsndmFsdWUnID0+IChzdHJpbmcpJHZhbHVlMl0sICd0aW1lJyA9PiBbICd2YWx1ZScgPT4gKHN0cmluZykkdGhpcy0+X2VuY3J5cHRvci0+ZW5jcnlwdCgkdmFsdWUxIC4gJHRoaXMtPl9kYXRlVGltZS0+Z210VGltZXN0YW1wKCkgLiAkdmFsdWUxKSBdLCAnaW5zdGFsbGVkJyA9PiBbJ3ZhbHVlJyA9PiAxXSwgJ2NvdW50JyA9PiBbJ3ZhbHVlJyA9PiAwXSBdIF0gXTsgJGNvbmZpZy0+c2V0U2VjdGlvbignZ29tYWdlX2FjdGl2YXRpb24nKSAtPnNldEdyb3VwcygkZ3JvdXBzKSAtPnNhdmUoKTsgfSAvKiogKiBAcmV0dXJuIG1peGVkICovIHB1YmxpYyBmdW5jdGlvbiBnYSgpIHsgJHZhbHVlID0gYmFzZTY0X2RlY29kZSgkdGhpcy0+X2VuY3J5cHRvci0+ZGVjcnlwdCgkdGhpcy0+X3Njb3BlQ29uZmlnLT5nZXRWYWx1ZSgnZ29tYWdlX2FjdGl2YXRpb24vZmVlZC9hcicpKSk7IGlmICgkdmFsdWUpIHsgcmV0dXJuICR0aGlzLT5fanNvbkhlbHBlci0+anNvbkRlY29kZSgkdmFsdWUpOyB9IHJldHVybiBbXTsgfSAvKiogKiBAcmV0dXJuIGFycmF5ICovIHByaXZhdGUgZnVuY3Rpb24gX2dldERvbWFpbnMoKSB7ICRkb21haW5zID0gW107IC8qKiBAdmFyIFxNYWdlbnRvXFN0b3JlXE1vZGVsXFdlYnNpdGUgJHdlYnNpdGUgKi8gZm9yZWFjaCAoJHRoaXMtPl9zdG9yZU1hbmFnZXItPmdldFdlYnNpdGVzKCkgYXMgJHdlYnNpdGUpIHsgJHVybCA9ICR3ZWJzaXRlLT5nZXRDb25maWcoJ3dlYi91bnNlY3VyZS9iYXNlX3VybCcpOyBpZiAoJGRvbWFpbiA9IHRyaW0ocHJlZ19yZXBsYWNlKCcvXi4qP1xcL1xcLyguKik/XFwvLycsICckMScsICR1cmwpKSkgeyAkZG9tYWluc1tdID0gJGRvbWFpbjsgfSAkdXJsID0gJHdlYnNpdGUtPmdldENvbmZpZygnd2ViL3NlY3VyZS9iYXNlX3VybCcpOyBpZiAoJGRvbWFpbiA9IHRyaW0ocHJlZ19yZXBsYWNlKCcvXi4qP1xcL1xcLyguKik/XFwvLycsICckMScsICR1cmwpKSkgeyAkZG9tYWluc1tdID0gJGRvbWFpbjsgfSB9IHJldHVybiBhcnJheV91bmlxdWUoJGRvbWFpbnMpOyB9IC8qKiAqIEByZXR1cm4gc3RyaW5nICovIHByaXZhdGUgZnVuY3Rpb24gX2dldFZlcnNpb24oKSB7IHJldHVybiAkdGhpcy0+X21vZHVsZUxpc3QtPmdldE9uZSgnR29NYWdlX0ZlZWQnKVsnc2V0dXBfdmVyc2lvbiddOyB9IC8qKiAqIEByZXR1cm4gYXJyYXkgKi8gcHVibGljIGZ1bmN0aW9uIGdldFN0b3JlT3B0aW9uQXJyYXkoKSB7ICRvcHRpb25zID0gW107ICRvcHRpb25zW10gPSBbJ2xhYmVsJyA9PiAnJywgJ3ZhbHVlJyA9PiAnJ107ICR3ZWJzaXRlcyA9ICR0aGlzLT5nZXRBdmFpbGFibGVXZWJzaXRlcygpOyAkbm9uRXNjYXBhYmxlTmJzcENoYXIgPSBodG1sX2VudGl0eV9kZWNvZGUoJyYjMTYwOycsIEVOVF9OT1FVT1RFUywgJ1VURi04Jyk7IGZvcmVhY2ggKCR0aGlzLT5fc3lzdGVtU3RvcmUtPmdldFdlYnNpdGVDb2xsZWN0aW9uKCkgYXMgJHdlYnNpdGUpIHsgaWYgKCFpbl9hcnJheSgkd2Vic2l0ZS0+Z2V0SWQoKSwgJHdlYnNpdGVzKSkgeyBjb250aW51ZTsgfSAkd2Vic2l0ZVNob3cgPSBmYWxzZTsgZm9yZWFjaCAoJHRoaXMtPl9zeXN0ZW1TdG9yZS0+Z2V0R3JvdXBDb2xsZWN0aW9uKCkgYXMgJGdyb3VwKSB7IGlmICgkd2Vic2l0ZS0+Z2V0SWQoKSAhPSAkZ3JvdXAtPmdldFdlYnNpdGVJZCgpKSB7IGNvbnRpbnVlOyB9ICRncm91cFNob3cgPSBmYWxzZTsgZm9yZWFjaCAoJHRoaXMtPl9zeXN0ZW1TdG9yZS0+Z2V0U3RvcmVDb2xsZWN0aW9uKCkgYXMgJHN0b3JlKSB7IGlmICgkZ3JvdXAtPmdldElkKCkgIT0gJHN0b3JlLT5nZXRHcm91cElkKCkpIHsgY29udGludWU7IH0gaWYgKCEkd2Vic2l0ZVNob3cpIHsgJG9wdGlvbnNbXSA9IFsnbGFiZWwnID0+ICR3ZWJzaXRlLT5nZXROYW1lKCksICd2YWx1ZScgPT4gW11dOyAkd2Vic2l0ZVNob3cgPSB0cnVlOyB9IGlmICghJGdyb3VwU2hvdykgeyAkZ3JvdXBTaG93ID0gdHJ1ZTsgJHZhbHVlcyA9IFtdOyB9ICR2YWx1ZXNbXSA9IFsgJ2xhYmVsJyA9PiBzdHJfcmVwZWF0KCRub25Fc2NhcGFibGVOYnNwQ2hhciwgNCkgLiAkc3RvcmUtPmdldE5hbWUoKSwgJ3ZhbHVlJyA9PiAkc3RvcmUtPmdldElkKCksIF07IH0gaWYgKCRncm91cFNob3cpIHsgJG9wdGlvbnNbXSA9IFsgJ2xhYmVsJyA9PiBzdHJfcmVwZWF0KCRub25Fc2NhcGFibGVOYnNwQ2hhciwgNCkgLiAkZ3JvdXAtPmdldE5hbWUoKSwgJ3ZhbHVlJyA9PiAkdmFsdWVzLCBdOyB9IH0gfSByZXR1cm4gJG9wdGlvbnM7IH0gcHVibGljIGZ1bmN0aW9uIG5vdGlmeSgpIHsgJGZyZXF1ZW5jeSA9IChpbnQpJHRoaXMtPl9zY29wZUNvbmZpZy0+Z2V0VmFsdWUoJ2dvbWFnZV9ub3RpZmljYXRpb24vbm90aWZpY2F0aW9uL2ZyZXF1ZW5jeScpOyBpZiAoISRmcmVxdWVuY3kpIHsgJGZyZXF1ZW5jeSA9IDI0OyB9ICRsYXN0X3VwZGF0ZSA9IChpbnQpJHRoaXMtPl9zY29wZUNvbmZpZy0+Z2V0VmFsdWUoJ2dvbWFnZV9ub3RpZmljYXRpb24vbm90aWZpY2F0aW9uL2xhc3RfdXBkYXRlJyk7IGlmICgoJGZyZXF1ZW5jeSAqIDYwICogNjAgKyAkbGFzdF91cGRhdGUpID4gJHRoaXMtPl9kYXRlVGltZS0+Z210VGltZXN0YW1wKCkpIHsgcmV0dXJuIGZhbHNlOyB9ICR0aW1lc3RhbXAgPSAkbGFzdF91cGRhdGU7IGlmICghJHRpbWVzdGFtcCkgeyAkdGltZXN0YW1wID0gJHRoaXMtPl9kYXRlVGltZS0+Z210VGltZXN0YW1wKCk7IH0gdHJ5IHsgJGNoID0gY3VybF9pbml0KCk7IGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9VUkwsIHNwcmludGYoJ2h0dHBzOi8vd3d3LmdvbWFnZS5jb20vaW5kZXgucGhwL2dvbWFnZV9ub3RpZmljYXRpb24vaW5kZXgvZGF0YScpKTsgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX1BPU1QsIHRydWUpOyBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfUE9TVEZJRUxEUywgJ3NrdT1mZWVkLXByby1tMiZ0aW1lc3RhbXA9JyAuICR0aW1lc3RhbXAgLiAnJnZlcj0nIC4gdXJsZW5jb2RlKCR0aGlzLT5fZ2V0VmVyc2lvbigpKSk7IGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9USU1FT1VULCAzMCk7IGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9SRVRVUk5UUkFOU0ZFUiwgdHJ1ZSk7IGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9TU0xfVkVSSUZZUEVFUiwgMCk7IGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9TU0xfVkVSSUZZSE9TVCwgMCk7ICRjb250ZW50ID0gY3VybF9leGVjKCRjaCk7IHRyeSB7ICRyZXN1bHQgPSAkdGhpcy0+X2pzb25IZWxwZXItPmpzb25EZWNvZGUoJGNvbnRlbnQpOyB9IGNhdGNoIChcRXhjZXB0aW9uICRlKSB7ICRyZXN1bHQgPSBmYWxzZTsgfSBpZiAoJHJlc3VsdCAmJiBpc3NldCgkcmVzdWx0WydmcmVxdWVuY3knXSkgJiYgKCRyZXN1bHRbJ2ZyZXF1ZW5jeSddICE9ICRmcmVxdWVuY3kpKSB7ICRmcmVxdWVuY3kgPSAkcmVzdWx0WydmcmVxdWVuY3knXTsgfSBpZiAoJHJlc3VsdCAmJiBpc3NldCgkcmVzdWx0WydkYXRhJ10pKSB7IGlmICghZW1wdHkoJHJlc3VsdFsnZGF0YSddKSkgeyAvKiogQHZhciBcTWFnZW50b1xBZG1pbk5vdGlmaWNhdGlvblxNb2RlbFxJbmJveCAkaW5ib3ggKi8gJGluYm94ID0gJHRoaXMtPl9vYmplY3RNYW5hZ2VyLT5jcmVhdGUoJ01hZ2VudG9cQWRtaW5Ob3RpZmljYXRpb25cTW9kZWxcSW5ib3gnKTsgJGluYm94LT5wYXJzZSgkcmVzdWx0WydkYXRhJ10pOyB9IH0gfSBjYXRjaCAoXEV4Y2VwdGlvbiAkZSkgeyB9ICRncm91cHMgPSBbICdub3RpZmljYXRpb24nID0+IFsgJ2ZpZWxkcycgPT4gWyAnZnJlcXVlbmN5JyA9PiBbJ3ZhbHVlJyA9PiAkZnJlcXVlbmN5XSwgJ2xhc3RfdXBkYXRlJyA9PiBbJ3ZhbHVlJyA9PiAkdGhpcy0+X2RhdGVUaW1lLT5nbXRUaW1lc3RhbXAoKV0gXSBdIF07IC8qKiBAdmFyIFxNYWdlbnRvXENvbmZpZ1xNb2RlbFxDb25maWcgJGNvbmZpZyAqLyAkY29uZmlnID0gJHRoaXMtPl9vYmplY3RNYW5hZ2VyLT5jcmVhdGUoJ01hZ2VudG9cQ29uZmlnXE1vZGVsXENvbmZpZycpOyAkY29uZmlnLT5zZXRTZWN0aW9uKCdnb21hZ2Vfbm90aWZpY2F0aW9uJykgLT5zZXRHcm91cHMoJGdyb3VwcykgLT5zYXZlKCk7IH0gfQ=="));